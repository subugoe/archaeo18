<project name="Archaeo18 Test" basedir="." default="serve" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <!--
    Usage:
    Run 'ant help'

    TODO:
    * Look if this should be integrated: https://github.com/h5bp/ant-build-script
  -->

  <!-- Imports -->
  <import file="./build/build.xml"/>
  <import file="./build/modules/jetty.xml"/>
  <import file="./build/modules/javascript.xml"/>
  <import file="./build/modules/jruby.xml"/>
  <import file="./build/modules/scm.xml"/>
  <import file="./build/modules/php.xml"/>
  <import file="./build/modules/compass.xml"/>
  <import file="./build/modules/sass.xml"/>
  <import file="./build/modules/tinypng.xml"/>

  <!-- Settings -->
  <!-- Jetty settings -->
  <property name="salvador.jetty.port" value="8080"/>

  <!-- directories for the build system -->
  <property name="target.dir" value="./target"/>
  <!--
  <property name="lib.dir" value="${target.dir}/lib"/>
  <property name="lib.build.dir" value="${lib.dir}/build"/>
  <property name="lib.jetty.dir" value="${lib.dir}/jetty"/>
  <property name="jetty.dir.tmp" value="${target.dir}/tmp"/>
  -->

  <!-- Servlet configuration -->
  <property name="servlet.archaeo18.webxml" value="./WEB-INF/web.xml"/>
  <property name="servlet.proxy.webxml" value="./testdata/proxy/WEB-INF/web.xml"/>

  <!-- JavaScript Stuff -->
  <property name="js.dir" value="./js"/>
  <property name="js.merged.file" value="script.js"/>
  <property name="js.target.dir" value="${target.dir}/${js.dir}"/>
  <property name="js.target.file" value="${js.target.dir}/${js.merged.file}"/>
  <!--
  <property name="js.file" value="${js.dir}/script-min.js"/>
-->

  <property name="php.dir" value="."/>
  <property name="html.dir" value="${target.dir}/html"/>
  <property name="html.suffix" value=".html"/>
  <!-- Tiny PNG and images -->
  <property name="img.dir" value="./img"/>
  <property name="tinypng.endpoint" value="http://api.tinypng.org/api/shrink"/>
  <property name="tinypng.apikey" value="aLqbWi6VBpKM3rGvFVw2W4TTVPFrSEEP"/>
  <property name="img.tiny.dir" value="${target.dir}/img"/>

  <property name="css.dir" value="./css"/>
  <property name="css.file" value="${css.dir}/style.css"/>

  <!-- Configuration files -->
  <property name="ropen.conf" value="./js/Archaeo18Config.js"/>
  <property name="ropen.conf.local" value="./testdata/conf/Archaeo18Config.local.js"/>
  <property name="ropen.conf.remote" value="./testdata/conf/Archaeo18Config.remote.js"/>

  <!-- Salvador configuration -->
  <property name="salvador.sass.compile.watch.src" value="./css"/>
  <property name="salvador.sass.compile.watch.dest" value="./css"/>

  <!-- Test data -->
  <property name="test.dir" value="./testdata"/>
  <property name="data.download.dir.indices" value="${test.dir}/indices"/>
  <property name="data.download.dir.kml" value="${test.dir}/kml"/>
  <property name="data.download.dir.cloud" value="${test.dir}/cloud"/>
  <property name="data.download.dir.docs" value="${test.dir}/docs"/>
  <property name="data.download.dir.search" value="${test.dir}/search"/>

  <!-- eXist Backend -->
  <property name="exist.base.url" value="http://134.76.21.92:8080"/>
  <property name="exist.queries.url" value="${exist.base.url}/exist/rest/db/archaeo18/queries"/>
  <property name="exist.entities.url" value="${exist.queries.url}/experimental/listEntities.xq?format=xhtml&amp;facet="/>

  <!-- Test data for the indices page and their local names -->
  <property name="exist.entities.persName.url" value="${exist.entities.url}tei:persName"/>
  <property name="exist.entities.placeName.url" value="${exist.entities.url}tei:placeName"/>
  <property name="exist.entities.term.url" value="${exist.entities.url}tei:term"/>
  <property name="exist.entities.bibl.url" value="${exist.entities.url}tei:bibl"/>
  <!-- local names -->
  <property name="exist.entities.persName.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:persName&amp;format=xhtml"/>
  <property name="exist.entities.placeName.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:placeName&amp;format=xhtml"/>
  <property name="exist.entities.term.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:term&amp;format=xhtml"/>
  <property name="exist.entities.bibl.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:bibl&amp;format=xhtml"/>

  <!-- KML data download -->
  <property name="exist.kml.url" value="${exist.queries.url}/experimental/listEntities.xq?format=kml&amp;facet="/>
  <property name="exist.kml.placeName.url" value="${exist.kml.url}tei:placeName"/>
  <property name="exist.kml.placeName.local" value="${data.download.dir.kml}/listEntities.xq$facet=tei:placeName&amp;format=kml"/>
  <!-- cloud data download -->
  <property name="exist.cloud.url" value="${exist.queries.url}/experimental/listEntities.xq?format=cloud&amp;facet="/>
  <property name="exist.cloud.persName.url" value="${exist.cloud.url}tei:persName"/>
  <property name="exist.cloud.placeName.url" value="${exist.cloud.url}tei:placeName"/>
  <property name="exist.cloud.term.url" value="${exist.cloud.url}tei:term"/>
  <property name="exist.cloud.persName.local" value="${data.download.dir.cloud}/listEntities.xq$facet=tei:persName&amp;format=cloud"/>
  <property name="exist.cloud.placeName.local" value="${data.download.dir.cloud}/listEntities.xq$facet=tei:placeName&amp;format=cloud"/>
  <property name="exist.cloud.term.local" value="${data.download.dir.cloud}/listEntities.xq$facet=tei:term&amp;format=cloud"/>
  <!-- Other data like facets -->
  <property name="exist.other.facets.url" value="${exist.queries.url}/getFacets.xq"/>
  <property name="exist.other.docs.url" value="${exist.queries.url}/listDocs.xquery"/>
  <property name="exist.other.facets.local" value="${data.download.dir.docs}/getFacets.xq"/>
  <property name="exist.other.docs.local" value="${data.download.dir.docs}/listDocs.xquery"/>
  <!-- Search data -->
  <property name="exist.search.url" value="${exist.queries.url}/search.xq?query=Trajan&amp;mode=xhtml"/>
  <property name="exist.search.local" value="${data.download.dir.search}/search.xq$query=Trajan&amp;mode=xhtml"/>

  <target name="init" depends="">
    <!-- Let the user override propeties -->
    <!-- See http://ant.apache.org/manual/Tasks/property.html -->
    <property file="./build.properties"/>
    <mkdir dir="${target.dir}"/>
    <mkdir dir="${js.target.dir}"/>
  </target>

  <target name="clean" depends="ropen.config.remote">
    <delete dir="${target.dir}"/>
  </target>

  <!-- 
  #######################################################
  # Downloads the test data from eXist 
  #######################################################
  -->
  <target name="data.download" depends="data.download.entities, data.download.kml, data.download.cloud, data.download.docs, data.download.search"/>

  <target name="data.download.kml">
    <get src="${exist.kml.placeName.url}" dest="${exist.kml.placeName.local}"/>
  </target>

  <target name="data.download.cloud">
    <get src="${exist.cloud.persName.url}" dest="${exist.cloud.persName.local}"/>
    <get src="${exist.cloud.placeName.url}" dest="${exist.cloud.placeName.local}"/>
    <get src="${exist.cloud.term.url}" dest="${exist.cloud.term.local}"/>
  </target>

  <target name="data.download.entities">
    <get src="${exist.entities.persName.url}" dest="${exist.entities.persName.local}"/>
    <get src="${exist.entities.placeName.url}" dest="${exist.entities.placeName.local}"/>
    <get src="${exist.entities.term.url}" dest="${exist.entities.term.local}"/>
    <get src="${exist.entities.bibl.url}" dest="${exist.entities.bibl.local}"/>
  </target>

  <target name="data.download.docs">
    <get src="${exist.other.facets.url}" dest="${exist.other.facets.local}"/>
    <get src="${exist.other.docs.url}" dest="${exist.other.docs.local}"/>
  </target>

  <target name="data.download.search">
    <get src="${exist.search.url}" dest="${exist.search.local}"/>
  </target>

  <!-- 
  #######################################################
  # Creation of deplyment package
  # Steps
  # 1) create target directories
  # 2) get runtime dependencies
  # 3) copy the content files (CSS, JS, HTML, images)
  #    and optimiz them on the fly
  # 4) package for deployment or testing
  #######################################################
  -->

  <!-- Sets propertiews and creates directories -->
  <target name="war.structure" depends="init">
    <property name="war.dir" value="${target.dir}/webapp"/>
    <property name="war.develop.file" value="${target.dir}/archaeo18.war"/>
    <!-- Installation package -->
    <property name="war.install.file" value="${target.dir}/ROOT.war"/>
    <property name="war.dir.lib" value="${war.dir}/WEB-INF/lib"/>
    <property name="war.dir.css.dir" value="${war.dir}/${css.dir}"/>
    <property name="war.dir.css.file" value="${war.dir}/${css.file}"/>
    <property name="war.dir.js.dir" value="${war.dir}/${js.dir}"/>
    <property name="war.dir.js.file" value="${war.dir.js.dir}/${js.merged.file}"/>

    <mkdir dir="${war.dir}"/>
    <mkdir dir="${war.dir.lib}"/>
    <mkdir dir="${war.dir.css.dir}"/>
    <mkdir dir="${war.dir.js.dir}"/>
  </target>

  <!-- Get the dependencies -->
  <!-- 
  TODO: get rid of quercus, compile PHP static
  -->
  <target name="war.dependencies" depends="salvador.base.maven.install, war.structure">
    <artifact:dependencies filesetId="war.classpath">
      <artifact:remoteRepository id="quercus" url="${salvador.php.quercus.repository.url}"/>
      <!-- This is only used in development
      <dependency groupId="org.tuckey" artifactId="urlrewritefilter" version="4.0.3"/>
      -->
      <dependency groupId="${salvador.php.quercus.group.id}" artifactId="${salvador.php.quercus.artifact.id}" version="${salvador.php.quercus.version}">
        <exclusion groupId="javax" artifactId="javaee-api"/>
      </dependency>
    </artifact:dependencies>
    <copy todir="${war.dir.lib}">
      <fileset refid="war.classpath"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="war.content.js" depends="salvador.js.yui.install, war.structure">
    <fileset dir="${js.dir}" includes="*.js" id="war.content.js.files">
      <exclude name="plugins.js"/>
    </fileset>
    <salvador.js.concat refid="${war.content.js.files}" dest="${js.target.file}"/>
    <salvador.js.yui.compress.js src="${js.target.file}" destfile="${war.dir.js.file}"/>
  </target>

  <!-- TODO: SCCS -->
  <target name="war.content.css" depends="salvador.js.yui.install, war.structure">
    <salvador.js.yui.compress.css src="${css.file}" destfile="${war.dir.css.file}"/>
  </target>

  <!-- TODO: make this work -->
  <target name="war.content.images" depends="salvador.tinypng.install, war.structure">
    <fail message="This is currently disabled"/>
  </target>

  <target name="war.content.php" depends="salvador.php.tasks, war.structure">
    <copy todir="${war.dir}">
      <fileset dir=".">
        <include name="*.php"/>
        <include name="*.html"/>
        <exclude name="build**"/>
        <exclude name="css**"/>
      </fileset>
    </copy>
    <!-- TODO: Enable this
    <fileset dir="." includes="*.php" id="war.content.php.files"/>
    <salvador.php.compile.dir refid="war.content.php.files" todir="${war.dir}"/>
     -->
  </target>

  <!-- JS stuff currenty deactivated  -->
  <target name="war.content" depends="war.content.css, war.content.php, ropen.config.remote">
    <copy todir="${war.dir}">
      <fileset dir=".">
        <include name="*.txt"/>
        <!-- *.php and *.html are handled by their own target, this way one can plug in a PHP compiler and / or JTidy -->
        <include name="*.ico"/>
        <include name="*.xml"/>
        <include name="img/**"/>
        <include name="WEB-INF/web.xml"/>
        <exclude name="build**"/>
        <exclude name="css**"/>
      </fileset>
    </copy>
  </target>

  <target name="war.content.php.filter">
    <!-- Filter PHP & HTML - not used yet -->
    <copy todir="${war.dir}">
      <fileset dir=".">
        <include name="*.php"/>
        <include name="*.html"/>
      </fileset>
      <!-- TODO: Use the variables of the buid system in here -->
      <filterchain>
        <!-- See http://ant.apache.org/manual/Types/filterchain.html -->
        <!-- This helps to escape xml stuff: http://www.freeformatter.com/xml-escape.html -->
        <!-- Use this if there is a method that works for each script tag
          <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">
            <param type="negate" value="true"/>
            <param type="regexp" value="foo*"/>
          </filterreader>
           -->
        <!-- Change to merged JS file -->
        <tokenfilter>
          <replacestring from="&lt;script src=&quot;./js/script.js&quot;&gt;&lt;/script&gt;" to="&lt;script src=&quot;${js.dir}/${js.merged.file}&quot;&gt;&lt;/script&gt;"/>
        </tokenfilter>
        <!-- Rewrite relocations 
             This section is currently empty
             Get rid of other js
        -->
        <tokenfilter>
          <replacestring from="&lt;script src=&quot;js/Indices.js&quot;&gt;&lt;/script&gt;" to=""/>
        </tokenfilter>
        <tokenfilter>
          <replacestring from="&lt;script src=&quot;./js/Scripts.js&quot;&gt;&lt;/script&gt;" to=""/>
        </tokenfilter>
      </filterchain>
    </copy>
  </target>

  <target name="war.devel" depends="war.content, war.dependencies">
    <war destfile="${war.file}" webxml="${war.dir}/WEB-INF/web.xml">
      <fileset dir="${war.dir}"/>
    </war>
  </target>

  <target name="war.install" depends="war.content, war.dependencies">
    <property name="war.file" value="${war.dir}/${war.install.name}.war"/>
    <war destfile="${war.file}" webxml="${war.dir}/WEB-INF/web.xml">
      <fileset dir="${war.dir}"/>
    </war>
  </target>

  <!-- SASS Stuff 
       This is still here fore reference until the functionality is ported to Salvador
  -->
  <!--
  <target name="scss.compile" depends="sass.download.gem, salvador.base.ant.contrib.install">
    <foreach target=".scss.compile" param="scss.file">
      <path>
        <fileset dir="${css.dir}" includes="**/*.scss" excludes="**/_*"/>
      </path>
    </foreach>
  </target>


  <target name="scss.compile.watch" depends="sass.download.gem">
    <java classname="org.jruby.Main" fork="true" dir="." spawn="true">
      <sysproperty key="jruby.home" value="${jruby.home}"/>
      <classpath>
        <fileset dir="${lib.jruby.dir}" includes="*.jar"/>
      </classpath>
      <arg value="-S"/>
      <arg value="sass"/>
      <arg value="- -watch"/>
      <arg value="- -poll"/>
      <arg value="- -debug-info"/>
      <arg value="${css.dir}:${css.dir}"/>
    </java>
  </target>

  <target name=".scss.compile">
    <propertyregex property="css.out" input="${scss.file}" regexp="(.*)\.scss" select="\1.css" casesensitive="false"/>

    <java classname="org.jruby.Main" fork="true" dir=".">
      <sysproperty key="jruby.home" value="${jruby.home}"/>
      <classpath>
        <fileset dir="${lib.jruby.dir}" includes="*.jar"/>
      </classpath>
      <arg value="-S"/>
      <arg value="sass"/>
      <arg value="- -trace"/>
      <arg value="- -unix-newlines"/>
      <arg value="${scss.file}"/>
      <arg value="${css.out}"/>
    </java>
  </target>
-->
  <!-- The PHP compiler stuff -->

  <!--
  <target name="php.compile" depends="salvador.php.download, salvador.jetty.download, salvador.base.ant.contrib.install">
    <mkdir dir="${html.dir}"/>
    <foreach target=".php.compile" param="php.file">
      <path>
        <fileset dir="${php.dir}" casesensitive="yes" includes="*.php"/>
      </path>
    </foreach>
    <move todir="${html.dir}">
      <fileset dir=".">
        <include name="*.html"/>
      </fileset>
      <filterchain>
        <tokenfilter>
          <replacestring from=".php" to="${html.suffix}"/>
        </tokenfilter>
      </filterchain>
    </move>
  </target>
  -->

  <!--
  <target name=".php.compile">
    <propertyregex property="php.out" input="${php.file}" regexp="(.*)[\\/](.*)\.php" select="./\2.html" casesensitive="false"/>
    <path id="quercus.plugin.classpath">
      <fileset dir="${lib.quercus.dir}" includes="*.jar"/>
    </path>
    <path id="jetty.plugin.classpath">
      <fileset dir="${lib.jetty.dir}" includes="*.jar"/>
    </path>
    <echo>Compiling ${php.file} to ${php.out}</echo>
    <java classname="com.caucho.quercus.CliQuercus" classpathref="quercus.plugin.classpath" outputproperty="compiler.output">
      <classpath>
        <path refid="quercus.plugin.classpath"/>
        <path refid="jetty.plugin.classpath"/>
      </classpath>
      <arg value="-f"/>
      <arg value="${php.file}"/>
    </java>
    <echo force="true" encoding="UTF-8" output="${php.out}" append="false" message="${compiler.output}"/>
  </target>
-->
  <target name="js.setup">
    <copy todir="${html.dir}">
      <fileset dir=".">
        <include name="**/*.js"/>
        <exclude name="target/**/*.*"/>
        <exclude name="build/**/*.*"/>
      </fileset>
    </copy>
  </target>

  <!-- TODO move this completely to Salvador -->
  <target name="compress.images" depends="salvador.base.ant.httptask.download, salvador.base.ant.contrib.install">
    <foreach target=".compress.images" param="png.file">
      <path>
        <fileset dir="${img.dir}" casesensitive="yes" includes="*.png"/>
      </path>
    </foreach>
  </target>

  <target name=".compress.images">
    <propertyregex property="png.out.file" input="${png.file}" regexp="(.*)[\\/](.*)\.png" select="./\2.png" casesensitive="false"/>
    <property name="img.out" value="${img.tiny.dir}/${png.out.file}"/>
    <!-- 
    Here is an API key for you to use:
    aLqbWi6VBpKM3rGvFVw2W4TTVPFrSEEP

    We have some documentation about our API at:
    https://gist.github.com/1eef650dcfb1609931fc

    The key is valid for one year. There are no limits attached to the API. Feel free to use it to convert a large number of images but keep in mind the service is paid for entirely by donations.
    -->
    <http url="${tinypng.endpoint}" method="POST" entityProperty="json.result">
      <credentials username="api" password="${tinypng.apikey}"/>
      <entity file="${png.file}" binary="true"/>
    </http>
    <!-- Now it get's really ugly - this will fail on Ant below 1.7 or if you are still on Java 5 or earlier -->
    <!-- We use the embeded JS Runtime from newer Java versions to decode the JSON Snippet -->
    <!-- Stolen from
    http://jeffreysambells.com/2012/02/20/using-javascript-to-parse-json-properties-with-ant
    http://ant.apache.org/manual/Tasks/script.html
    -->
    <script language="javascript">
      <![CDATA[
      resultJson = project.getProperty("json.result");
      var struct = eval("(" + resultJson + ")");
      project.setProperty("tinypng.result.url", struct.output.url);
    ]]></script>
    <echo message="Result is at ${tinypng.result.url}, will be saved as ${img.out}"/>
    <get src="${tinypng.result.url}" dest="${img.out}" usetimestamp="true"/>
  </target>

  <!-- Jetty related targets -->

  <!-- This can be used to test the constructed war file -->
  <target name="war.run" depends="salvador.jetty.download, war.devel">
    <jetty tempDirectory="${jetty.dir.tmp}">
      <connectors>
        <selectChannelConnector port="${jetty.port}"/>
      </connectors>
      <webApp name="archaeo18" warfile="${war.file}" contextpath="/archaeo18"/>
    </jetty>
  </target>

  <target name="jetty.start" depends="salvador.jetty.install">
    <!-- 
    See http://docs.codehaus.org/display/JETTY/Ant+Jetty+Plugin for configuration
    For newer Versions
    http://www.eclipse.org/jetty/documentation/current/jetty-ant.html
    -->
    <echo>starting Jetty...</echo>
    <jetty tempDirectory="${jetty.dir.tmp}">
      <connectors>
        <selectChannelConnector port="${salvador.jetty.port}"/>
      </connectors>
      <webapp webXmlFile="${servlet.archaeo18.webxml}" contextPath="/archaeo18" name="archaeo18" warfile="."/>
      <webapp webXmlFile="${servlet.proxy.webxml}" contextPath="/" name="proxy" warfile="${test.dir}/proxy"/>
    </jetty>
  </target>

  <!-- http://www.webjars.org/ -->
  <!-- TODO: See if this can be moved to Salvador
  <target name="war.js.dependencies" depends="salvador.base.maven.install, war.structure">
    <property name="war.dir.js.dir.lib" value="${war.dir.js.dir}/libs"/>
    <artifact:dependencies filesetId="war.js.files">
      <dependency groupId="org.webjars" artifactId="jquery" version="1.8.3"/>
    </artifact:dependencies>
    
    
  </target>
-->

  <!-- Configuration -->

  <target name="ropen.config.local">
    <copy force="true" overwrite="true" file="${ropen.conf.local}" tofile="${ropen.conf}"/>
  </target>

  <target name="ropen.config.remote">
    <copy force="true" overwrite="true" file="${ropen.conf.remote}" tofile="${ropen.conf}"/>
  </target>

  <!-- Meta targets -->
  <!-- TODO: Get rid of this -->
  <target name="war" depends="war.install"/>
  <target name="serve" depends="salvador.sass.compile.watch, ropen.config.local, jetty.start"/>
  <target name="devel" depends="serve"/>
  <target name="all.static" depends="clean, war, jsdoc"/>

  <target name="jsdoc" depends="salvador.js.jsdoctoolkit.install">
    <!-- See http://www.kajabity.com/2012/02/automating-jsdoc-with-apache-ant/ -->
  </target>

  <target name="help" description="Prints some help">
    <echo>ant help - This help</echo>
    <echo>ant war.dist - War file for deployment</echo>
    <echo>ant war.run - Run War file in jetty (for debugging the war cration process)</echo>
    <echo>ant serve - serve the contenst of this project using Jetty</echo>
  </target>

</project>
