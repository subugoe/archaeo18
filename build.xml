<project name="Archaeo18 Frontend" basedir="." default="serve" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <!--
    Usage:
    Run 'ant help'

    TODO:
    * Look if this should be integrated: https://github.com/h5bp/ant-build-script
  -->

  <!-- 
  #######################################################
  # Imports, used Salvador Modules 
  #######################################################
  -->
  <import file="./build/build.xml"/>
  <import file="./build/modules/jetty.xml"/>
  <import file="./build/modules/javascript.xml"/>
  <import file="./build/modules/jruby.xml"/>
  <import file="./build/modules/scm.xml"/>
  <import file="./build/modules/php.xml"/>
  <import file="./build/modules/compass.xml"/>
  <import file="./build/modules/sass.xml"/>
  <import file="./build/modules/tinypng.xml"/>
  <import file="./build/modules/saxon.xml"/>
  <import file="./build/modules/solr.xml"/>

  <!-- 
  #######################################################
  # Settings
  #######################################################
  -->
  <!-- directories for the build system -->
  <!-- This is provided by Salvador
  <property name="target.dir" value="./target"/>
  -->

  <!-- Deployment Settings -->
  <!-- This is the name of the war file, without war suffix , result will be in target.dir -->
  <property name="war.install.name" value="archaeo18"/>

  <!-- Servlet configuration -->
  <!-- This one sets up Quercus for PHP -->
  <property name="servlet.archaeo18.webxml" value="./WEB-INF/web.xml"/>
  <!-- This one sets up the URLRewriteFilter for the local test data -->
  <property name="servlet.proxy.webxml" value="./testdata/proxy/WEB-INF/web.xml"/>

  <!-- JavaScript Stuff -->
  <property name="js.dir" value="./js"/>
  <property name="js.merged.file" value="script.js"/>
  <property name="js.target.dir" value="${target.dir}/${js.dir}"/>
  <property name="js.target.file" value="${js.target.dir}/${js.merged.file}"/>
  <!--
  <property name="js.file" value="${js.dir}/script-min.js"/>
-->

  <property name="php.dir" value="."/>
  <property name="html.dir" value="${target.dir}/html"/>
  <property name="html.suffix" value=".html"/>
  <!-- Tiny PNG and images -->
  <property name="img.dir" value="./img"/>

  <property name="css.dir" value="./css"/>
  <property name="css.file" value="${css.dir}/style.css"/>
  <property name="scss.file" value="${css.dir}/style.scss"/>

  <!-- Configuration files -->
  <property name="ropen.conf" value="./Resources/Public/JavaScript/Archaeo18Config.js"/>
  <property name="ropen.conf.local" value="./testdata/conf/Archaeo18Config.local.js"/>
  <property name="ropen.conf.remote" value="./testdata/conf/Archaeo18Config.remote.js"/>

  <!-- Ropen files -->
  <property name="ropen.dir" value="./ropen"/>
  <!-- Salvador configuration, this is currently set to the defaults of Salvador,
       it's just here to avoid searching in the Salvador sources.      
  -->
  <property name="salvador.sass.compile.watch.src" value="./css"/>
  <property name="salvador.sass.compile.watch.dest" value="./css"/>
  <property name="salvador.tinypng.apikey" value="aLqbWi6VBpKM3rGvFVw2W4TTVPFrSEEP"/>
  <!-- Jetty settings -->
  <property name="salvador.jetty.port" value="8080"/>

  <!-- Test data -->
  <property name="test.dir" value="./testdata"/>
  <property name="data.download.dir.indices" value="${test.dir}/indices"/>
  <property name="data.download.dir.kml" value="${test.dir}/kml"/>
  <property name="data.download.dir.cloud" value="${test.dir}/cloud"/>
  <property name="data.download.dir.docs" value="${test.dir}/docs"/>
  <property name="data.download.dir.search" value="${test.dir}/search"/>

  <!-- eXist Backend -->
  <property name="exist.base.url" value="http://134.76.21.92:8080"/>
  <property name="exist.queries.url" value="${exist.base.url}/exist/rest/db/archaeo18/queries"/>
  <property name="exist.entities.url" value="${exist.queries.url}/experimental/listEntities.xq?format=xhtml&amp;facet="/>

  <!-- Test data for the indices page and their local names -->
  <property name="exist.entities.persName.url" value="${exist.entities.url}tei:persName"/>
  <property name="exist.entities.placeName.url" value="${exist.entities.url}tei:placeName"/>
  <property name="exist.entities.term.url" value="${exist.entities.url}tei:term"/>
  <property name="exist.entities.bibl.url" value="${exist.entities.url}tei:bibl"/>
  <!-- local names -->
  <property name="exist.entities.persName.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:persName&amp;format=xhtml"/>
  <property name="exist.entities.placeName.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:placeName&amp;format=xhtml"/>
  <property name="exist.entities.term.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:term&amp;format=xhtml"/>
  <property name="exist.entities.bibl.local" value="${data.download.dir.indices}/listEntities.xq$facet=tei:bibl&amp;format=xhtml"/>

  <!-- KML data download -->
  <property name="exist.kml.url" value="${exist.queries.url}/experimental/listEntities.xq?format=kml&amp;facet="/>
  <property name="exist.kml.placeName.url" value="${exist.kml.url}tei:placeName"/>
  <property name="exist.kml.placeName.local" value="${data.download.dir.kml}/listEntities.xq$facet=tei:placeName&amp;format=kml"/>
  <!-- cloud data download -->
  <property name="exist.cloud.url" value="${exist.queries.url}/experimental/listEntities.xq?format=cloud&amp;facet="/>
  <property name="exist.cloud.persName.url" value="${exist.cloud.url}tei:persName"/>
  <property name="exist.cloud.placeName.url" value="${exist.cloud.url}tei:placeName"/>
  <property name="exist.cloud.term.url" value="${exist.cloud.url}tei:term"/>
  <property name="exist.cloud.persName.local" value="${data.download.dir.cloud}/listEntities.xq$facet=tei:persName&amp;format=cloud"/>
  <property name="exist.cloud.placeName.local" value="${data.download.dir.cloud}/listEntities.xq$facet=tei:placeName&amp;format=cloud"/>
  <property name="exist.cloud.term.local" value="${data.download.dir.cloud}/listEntities.xq$facet=tei:term&amp;format=cloud"/>
  <!-- Other data like facets -->
  <property name="exist.other.facets.url" value="${exist.queries.url}/getFacets.xq"/>
  <property name="exist.other.facets.local" value="${data.download.dir.docs}/getFacets.xq"/>
  <property name="exist.other.docs.local" value="${data.download.dir.docs}/listDocs.xquery"/>
  <!-- Search data -->
  <property name="exist.search.url" value="${exist.queries.url}/search.xq?query=Trajan&amp;mode=xhtml"/>
  <property name="exist.search.local" value="${data.download.dir.search}/search.xq$query=Trajan&amp;mode=xhtml"/>

  <!-- Data hanadling -->
  <property name="data.dir" value="./content/app/"/>
  <property name="data.tei.dir" value="${data.dir}tei/"/>
  <property name="data.tei-enriched.dir" value="${data.dir}tei-enriched/"/>
  <property name="data.tei-pages.dir" value="${data.dir}tei-pages/"/>
  <property name="data.xhtml-pages.dir" value="${data.dir}xhtml-pages/"/>
  <property name="data.kml-pages.dir" value="${data.dir}kml-pages/"/>
  <property name="data.cloud-pages.dir" value="${data.dir}cloud-pages/"/>
  <property name="data.mets.dir" value="${data.dir}mets/"/>
  <property name="data.indices.dir" value="${data.dir}indices/"/>
  <property name="data.cloud.dir" value="${data.dir}cloud/"/>
  <property name="data.xhtml.structure.dir" value="${data.dir}structure/"/>
  <property name="data.xhtml.content.dir" value="${data.dir}content/"/>
  <property name="data.xhtml.header.dir" value="${data.dir}header/"/>
  <property name="empty.xml" value="./Resources/Private/Xml/empty.xml"/>
  <property name="data.manuscripts.directory" value="./content/manuscripts/"/>
  <property name="data.indices.persName.file" value="${data.indices.dir}tei:persName.xhtml"/>
  <property name="data.indices.placeName.file" value="${data.indices.dir}tei:placeName.xhtml"/>
  <property name="data.indices.term.file" value="${data.indices.dir}tei:term.xhtml"/>
  <property name="data.indices.bibl.file" value="${data.indices.dir}tei:bibl.xhtml"/>
  <property name="data.cloud.persName.file" value="${data.cloud.dir}tei:persName.xhtml"/>
  <property name="data.cloud.placeName.file" value="${data.cloud.dir}tei:placeName.xhtml"/>
  <property name="data.cloud.term.file" value="${data.cloud.dir}tei:term.xhtml"/>
  <property name="data.cloud.bibl.file" value="${data.cloud.dir}tei:bibl.xhtml"/>
  <property name="data.docs.list" value="${data.dir}/list-docs.xml"/>

  <!-- Stylesheets -->
  <property name="xslt.enrich" value="./ropen-backend/src/main/xslt/transformations/import/import.xsl"/>
  <property name="xslt.statistics" value="./ropen-backend/src/main/xslt/transformations/statistics.xsl"/>
  <property name="xslt.description" value="./ropen-backend/src/main/xslt/transformations/description.xsl"/>
  <property name="xslt.indexes" value="./ropen-backend/src/main/xslt/transformations/import/indexes.xsl"/>
  <property name="xslt.overview" value="./ropen-backend/src/main/xslt/transformations/overview.xsl"/>
  <property name="xslt.list" value="./ropen-backend/src/main/xslt/transformations/list-docs.xsl"/>
  <property name="xslt.split" value="./ropen-backend/src/main/xslt/transformations/split-pages.xsl"/>
  <property name="xslt.xhtml" value="./ropen-backend/src/main/xslt/transformations/TEI2XHTML.xsl"/>
  <property name="xslt.xhtml.structure" value="./ropen-backend/src/main/xslt/transformations/structure-extractor.xsl"/>
  <!-- Solr related Stylesheets -->
  <!-- TODO, integrate into ropen-backend -->
  <property name="xslt.solr.synonyms" value="./data/solr/synonymelist.xsl"/>
  <property name="xslt.solr.docs" value="./data/solr/solr.xsl"/>

  <!-- METS related settings -->
  <property name="data.docs.mets.base.uri" value="http://134.76.21.92:8080/images/"/>

  <!-- A helper variable that contains the working directory -->
  <property name="cwd" location="."/>
  <!-- 
  #######################################################
  # Targets needed by the build system 
  #######################################################
  -->

  <!-- Simple help -->
  <target name="help" description="Prints some help">
    <echo>ant help - This help</echo>
    <echo>ant war.dist - War file for deployment (alias war)</echo>
    <echo>ant war.run - Run War file in jetty (for debugging the war cration process)</echo>
    <echo>ant serve - serve the contents of this project using Jetty</echo>
    <echo>ant data.download - get new testdata from the server (shouldn't be used anymore)</echo>
    <echo>ant data.generate - generates the Testdata</echo>
  </target>

  <!-- Creates the needed directories -->
  <target name="init" depends="">
    <!-- Let the user override propeties, usefull for passwords etc. -->
    <!-- See http://ant.apache.org/manual/Tasks/property.html -->
    <property file="./build.properties"/>
    <mkdir dir="${target.dir}"/>
    <mkdir dir="${js.target.dir}"/>
  </target>

  <!-- Removes directories needed by the build system -->
  <target name="clean" depends="ropen.config.remote, salvador.base.clean, data.dir.clean">
    <delete dir="${target.dir}"/>
  </target>

  <!-- Meta targets (aliases) -->
  <target name="war" depends="war.install"/>
  <target name="serve" depends="salvador.sass.convert.watch, ropen.config.local, jetty.start"/>
  <target name="devel" depends="serve"/>
  <target name="all.static" depends="clean, war, jsdoc"/>

  <!-- 
  #######################################################
  # Downloads the test data from eXist 
  #######################################################
  entities are disabled, they can be generated now
  -->
  <target name="data.download" depends="data.download.kml, data.download.cloud, data.download.docs"/>

  <target name="data.download.kml">
    <get src="${exist.kml.placeName.url}" dest="${exist.kml.placeName.local}" verbose="on"/>
  </target>

  <target name="data.download.cloud">
    <get src="${exist.cloud.persName.url}" dest="${exist.cloud.persName.local}" verbose="on"/>
    <get src="${exist.cloud.placeName.url}" dest="${exist.cloud.placeName.local}" verbose="on"/>
    <get src="${exist.cloud.term.url}" dest="${exist.cloud.term.local}" verbose="on"/>
  </target>

  <target name="data.download.docs">
    <get src="${exist.other.facets.url}" dest="${exist.other.facets.local}" verbose="on"/>
  </target>


  <!-- 
  #######################################################
  # Creation of deployment package
  # Steps
  # 1) create target directories
  # 2) get runtime dependencies
  # 3) copy the content files (CSS, JS, HTML, images)
  #    and optimize them on the fly
  # 4) package for deployment or testing
  #######################################################
  -->

  <!-- Sets propertiews and creates directories -->
  <target name="war.structure" depends="init">
    <echo>Setting up directories for war file</echo>
    <property name="war.dir" value="${target.dir}/webapp"/>
    <!-- Installation package -->
    <property name="war.file" value="${target.dir}/${war.install.name}.war"/>
    <property name="war.dir.lib" location="${war.dir}/WEB-INF/lib"/>
    <property name="war.dir.images.dir" location="${war.dir}/${img.dir}"/>
    <property name="war.dir.css.dir" location="${war.dir}/${css.dir}"/>
    <property name="war.dir.css.file" location="${war.dir}/${css.file}"/>
    <property name="war.dir.js.dir" location="${war.dir}/${js.dir}"/>
    <property name="war.dir.js.file" location="${war.dir.js.dir}/${js.merged.file}"/>

    <mkdir dir="${war.dir}"/>
    <mkdir dir="${war.dir.lib}"/>
    <mkdir dir="${war.dir.css.dir}"/>
    <mkdir dir="${war.dir.js.dir}"/>
    <mkdir dir="${war.dir}/${ropen.dir}"/>
  </target>

  <!-- Get the dependencies -->
  <!-- 
  TODO: get rid of quercus, compile PHP static
  -->
  <target name="war.dependencies" depends="salvador.base.maven.install, war.structure">
    <echo>Getting dependencies for the war file</echo>
    <artifact:dependencies filesetId="war.classpath">
      <artifact:remoteRepository id="quercus" url="${salvador.php.quercus.repository.url}"/>
      <dependency groupId="${salvador.php.quercus.group.id}" artifactId="${salvador.php.quercus.artifact.id}" version="${salvador.php.quercus.version}">
        <exclusion groupId="javax" artifactId="javaee-api"/>
      </dependency>
    </artifact:dependencies>
    <copy todir="${war.dir.lib}">
      <fileset refid="war.classpath"/>
      <mapper type="flatten"/>
    </copy>
  </target>

  <target name="war.content.ropen" depends="war.structure">
    <copy todir="${war.dir}/${ropen.dir}">
      <fileset dir="${ropen.dir}">
        <exclude name="testdata/**"/>
        <exclude name="build/**"/>
        <exclude name="WEB-INF/**"/>
        <exclude name="build.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="war.content.js" depends="salvador.js.yui.install, war.content.ropen">
    <fileset dir="${js.dir}" includes="*.js" id="war.content.js.files">
      <!-- 
      <exclude name="plugins.js"/>
       -->
    </fileset>
    <copy todir="${war.dir}/${js.dir}">
      <fileset refid="war.content.js.files"/>
    </copy>
    <!--
        TODO: Enable this:
    <salvador.js.concat refid="${war.content.js.files}" dest="${js.target.file}"/>
    <salvador.js.yui.compress.js src="${js.target.file}" destfile="${war.dir.js.file}"/>
    -->
  </target>

  <target name="war.content.css" depends="salvador.js.yui.install, salvador.sass.macros, war.structure">
    <echo>Processing CSS for war file (${war.dir.css.file})</echo>
    <salvador.sass.convert src="${scss.file}" destfile="${war.dir.css.file}.tmp"/>
    <!-- This is needed since the CSS file doesn't seem to be written directly -->
    <sleep milliseconds="500"/>
    <salvador.js.yui.compress.css src="${war.dir.css.file}.tmp" destfile="${war.dir.css.file}"/>
    <delete file="${war.dir.css.file}.tmp"/>
  </target>

  <target name="war.content.images" depends="salvador.tinypng.install, war.structure">
    <echo>Processing Images for war file (to ${war.dir.images.dir})</echo>
    <copy todir="${war.dir}">
      <fileset dir=".">
        <include name="**/*.png"/>
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="img/**"/>
        <exclude name="build/**"/>
      </fileset>
    </copy>
    <!-- TODO
         Enable this
    <fileset dir="." includes="**/*.png" id="war.content.images.files"/>
    <salvador.tinypng.compress.dir refid="war.content.images.files" todir="${war.dir.images.dir}"/>
    -->
  </target>

  <target name="war.content.php" depends="salvador.php.macros, war.structure">
    <echo>Processing PHP and HTML for war file</echo>
    <copy todir="${war.dir}">
      <fileset dir="${php.dir}">
        <include name="*.php"/>
        <include name="*.html"/>
        <exclude name="build**"/>
        <exclude name="css**"/>
      </fileset>
    </copy>
    <!-- TODO: Enable this
    <fileset dir="${php.dir}" includes="*.php" id="war.content.php.files"/>
    <salvador.php.compile.dir refid="war.content.php.files" todir="${war.dir}"/>
    -->
  </target>

  <!-- Rewrite the servlet configuration for deployment -->
  <target name="war.content.servlet">
    <xslt in="WEB-INF/web.xml" out="${war.dir}/WEB-INF/web.xml">
      <style>
        <!-- This inline stylesheet removes all references to URL rewriting -->
        <!-- See https://issues.apache.org/bugzilla/show_bug.cgi?id=32461 -->
        <string><![CDATA[
          <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
            <xsl:template match="@*|node()">
               <xsl:copy>
                   <xsl:apply-templates select="@*|node()"/>
               </xsl:copy>
            </xsl:template>
            <xsl:template match="//*[./filter-name/text()  = 'UrlRewriteFilter']"/>
          </xsl:stylesheet>
          ]]></string>
      </style>
    </xslt>
  </target>

  <!-- TODO: JS stuff currenty deactivated  -->
  <target name="war.content" depends="war.content.css, war.content.php, ropen.config.remote, war.content.images, war.content.servlet, war.content.js">
    <copy todir="${war.dir}">
      <fileset dir=".">
        <include name="*.txt"/>
        <!-- *.php and *.html are handled by their own target, this way one can plug in a PHP compiler and / or JTidy -->
        <include name="*.ico"/>
        <include name="*.xml"/>
        <!-- This file is copied by war.content.servlet -->
        <exclude name="WEB-INF/web.xml"/>
        <!--
        <include name="*.png"/>
        -->
        <!-- Images are handled by their own target for compression -->
        <exclude name="img/**"/>
        <exclude name="testdata**"/>
        <exclude name="build**"/>
        <exclude name="css**"/>
        <exclude name="cookbooks"/>
        <exclude name=".git*"/>
        <exclude name="Vagrantfile"/>
        <exclude name="README.md"/>
        <exclude name="LICENSE"/>
        <exclude name="build"/>
        <exclude name="build.xml"/>
        <exclude name="target"/>
        <exclude name="ropen"/>
      </fileset>
    </copy>
  </target>

  <!-- TODO: Reenable this if everything else works -->
  <target name="war.content.php.filter">
    <!-- Filter PHP & HTML - not used yet -->
    <copy todir="${war.dir}">
      <fileset dir=".">
        <include name="*.php"/>
        <include name="*.html"/>
      </fileset>
      <!-- TODO: Use the variables of the buid system in here -->
      <filterchain>
        <!-- See http://ant.apache.org/manual/Types/filterchain.html -->
        <!-- This helps to escape xml stuff: http://www.freeformatter.com/xml-escape.html -->
        <!-- Use this if there is a method that works for each script tag
          <filterreader classname="org.apache.tools.ant.filters.LineContainsRegExp">
            <param type="negate" value="true"/>
            <param type="regexp" value="foo*"/>
          </filterreader>
           -->
        <!-- Change to merged JS file -->
        <tokenfilter>
          <replacestring from="&lt;script src=&quot;./js/script.js&quot;&gt;&lt;/script&gt;" to="&lt;script src=&quot;${js.dir}/${js.merged.file}&quot;&gt;&lt;/script&gt;"/>
        </tokenfilter>
        <!-- Rewrite relocations 
             This section is currently empty
             Get rid of other js
        -->
        <tokenfilter>
          <replacestring from="&lt;script src=&quot;js/Indices.js&quot;&gt;&lt;/script&gt;" to=""/>
        </tokenfilter>
        <tokenfilter>
          <replacestring from="&lt;script src=&quot;./js/Scripts.js&quot;&gt;&lt;/script&gt;" to=""/>
        </tokenfilter>
      </filterchain>
    </copy>
  </target>

  <target name="war.install" depends="war.content, war.dependencies">
    <war destfile="${war.file}" webxml="${war.dir}/WEB-INF/web.xml">
      <fileset dir="${war.dir}"/>
    </war>
  </target>
  <!-- Alias -->
  <target name="war.dist" depends="war.install"/>

  <!-- 
  #######################################################
  # Jetty related targets
  #######################################################
  -->

  <!-- This can be used to test the constructed war file -->
  <target name="war.run" depends="salvador.jetty.install, war.install">
    <jetty.run tempDirectory="${salvador.jetty.tmp.dir}" scanIntervalSeconds="5">
      <connectors>
        <selectChannelConnector port="${salvador.jetty.port}"/>
      </connectors>
      <webApp war="${war.file}" contextpath="/archaeo18"/>
    </jetty.run>
  </target>

  <target name="jetty.start" depends="data.generate, salvador.jetty.install, ropen.config.local, salvador.urlrewritefilter.download, salvador.php.download">
    <echo>starting Jetty (with local configuration)...</echo>
    <jetty.run tempDirectory="${salvador.jetty.tmp.dir}" scanIntervalSeconds="5">
      <connectors>
        <selectChannelConnector port="${salvador.jetty.port}"/>
      </connectors>
      <webapp descriptor="${servlet.archaeo18.webxml}" contextPath="/archaeo18" war=".">
        <lib dir="${salvador.php.lib.dir}" includes="*.jar"/>
      </webapp>
      <webapp descriptor="${servlet.proxy.webxml}" contextPath="/" war="${test.dir}/proxy">
        <lib dir="${salvador.urlrewritefilter.lib.dir}" includes="*.jar"/>
      </webapp>
    </jetty.run>
  </target>

  <!-- 
  #######################################################
  # Configuration file handling
  #######################################################
  -->

  <target name="ropen.config.local">
    <copy force="true" overwrite="true" file="${ropen.conf.local}" tofile="${ropen.conf}"/>
  </target>

  <target name="ropen.config.remote">
    <copy force="true" overwrite="true" file="${ropen.conf.remote}" tofile="${ropen.conf}"/>
  </target>

  <target name="jsdoc" depends="salvador.js.jsdoctoolkit.install">
    <!-- See http://www.kajabity.com/2012/02/automating-jsdoc-with-apache-ant/ -->
  </target>

  <!-- 
  #######################################################
  # Solr handling
  #######################################################
  -->
  <target name="solr.init" depends="init, salvador.solr.download">
    <property name="solr.dir" value="${target.dir}/sorl"/>
    <property name="solr.docs.dir" value="${solr.dir}/docs"/>
    <property name="solr.synonym.list" value="${solr.dir}/synonyms.txt"/>
    <mkdir dir="${solr.dir}"/>
    <mkdir dir="${solr.docs.dir}"/>
  </target>

  <target name="solr.clean">
    <delete dir="${solr.dir}"/>
  </target>

  <target name="sol.synonyms" depends="salvador.saxon.install, data.enrich, solr.init">
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.solr.synonyms}" destfile="${solr.synonym.list}"
      params="collection=${basedir}/${data.tei.dir}"
    />
  </target>

  <target name="sol.docs" depends="salvador.saxon.install, solr.init">
    
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.enrich}" destfile="${data.enrich.output}"
      params="collection=${basedir}/${data.tei.dir} mets-collection=${basedir}/${data.mets.dir} tei-enriched-collection=${basedir}/${data.tei-enriched.dir} document-listing=${basedir}/${data.docs.list}"
    />
  </target>

  <!-- 
  #######################################################
  # Generate Data
  #######################################################
  -->
  <target name="data.dirs">
    <mkdir dir="${data.tei-enriched.dir}"/>
    <mkdir dir="${data.tei-pages.dir}"/>
    <mkdir dir="${data.xhtml-pages.dir}"/>
    <mkdir dir="${data.indices.dir}"/>
    <mkdir dir="${data.cloud.dir}"/>
    <mkdir dir="${data.xhtml.structure.dir}"/>
    <mkdir dir="${data.xhtml.content.dir}"/>
    <mkdir dir="${data.xhtml.header.dir}"/>
  </target>

  <target name="data.dir.clean">
    <delete dir="${data.tei-enriched.dir}"/>
    <delete dir="${data.tei-pages.dir}"/>
    <delete dir="${data.xhtml-pages.dir}"/>
    <!-- Keep the empty METS file -->
    <delete>
      <fileset dir="${data.mets.dir}" includes="**/*.xml" excludes="null.xml"/>
    </delete>
    <delete dir="${data.indices.dir}"/>
    <delete dir="${data.cloud.dir}"/>
    <delete dir="${data.xhtml.structure.dir}"/>
    <delete dir="${data.xhtml.content.dir}"/>
    <delete dir="${data.xhtml.header.dir}"/>
  </target>

  <!-- Test if data was generated (only existing directories) This will fail if data was once genrated only in prts-->
  <target name="data.dir.check">
    <condition property="data.dir.exist">
      <and>
        <available file="${data.tei-enriched.dir}" type="dir"/>
        <available file="${data.mets.dir}" type="dir"/>
        <available file="${data.indices.dir}" type="dir"/>
        <available file="${data.cloud.dir}" type="dir"/>
        <available file="${data.xhtml.structure.dir}" type="dir"/>
        <available file="${data.xhtml.dir}" type="dir"/>
      </and>
    </condition>
  </target>
  
  <target name="data.pages.check">
    <condition property="data.pages.exist">
      <and>
        <available file="${data.tei-pages.dir}" type="dir"/>
        <available file="${data.xhtml-pages.dir}" type="dir"/>
        <!--
        <available file="${data.kml-pages.dir}" type="dir"/>
        <available file="${data.cloud-pages.dir}" type="dir"/>
        -->
      </and>
    </condition>
  </target>

  <!-- Alias -->
  <target name="data.clean" depends="data.dir.clean"/>

  <target name="data.statistics" depends="data.dir.check, salvador.saxon.install, init" unless="data.dir.exist">
    <property name="data.statistics.output" value="${target.dir}/statistics-report.xhtml"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.statistics}" destfile="${data.statistics.output}" params="collection=${basedir}/${data.tei.dir}"/>
  </target>

  <target name="data.enrich" depends="data.dirs, data.enrich.check, salvador.saxon.install, init" unless="data.entiched.fileset.empty">
    <property name="data.enrich.output" value="${target.dir}/enrichment-report.xhtml"/>
    <echo message="Importing TEI"/>
    <echo message="Base directory: ${basedir}"/>
    <echo message="Input collection: ${basedir}/${data.tei.dir}"/>
    <echo message="METS collection: ${basedir}/${data.mets.dir}"/>  
    <echo message="Enriched TEI collection: ${basedir}/${data.tei-enriched.dir}"/>
    <echo message="Document listing: ${basedir}/${data.docs.list}"/>
    <echo message="XHTML Structure collection: ${basedir}/${data.xhtml.structure.dir}"/>
    <echo message="XHTML content collection: ${basedir}/${data.xhtml.content.dir}"/>
    <echo message="XHTML header collection: ${basedir}/${data.xhtml.header.dir}"/>
    <echo message="METS base URL: ${data.docs.mets.base.uri}"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.enrich}" destfile="${data.enrich.output}"
      params="collection=${basedir}/${data.tei.dir} mets-collection=${basedir}/${data.mets.dir} tei-enriched-collection=${basedir}/${data.tei-enriched.dir} document-listing-file=${basedir}/${data.docs.list} url-prefix=${data.docs.mets.base.uri} replace-prefix=${basedir}./"
    />
    <!--
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.enrich}" destfile="${data.enrich.output}"
      params="collection=${basedir}/${data.tei.dir} mets-collection=${basedir}/${data.mets.dir} tei-enriched-collection=${basedir}/${data.tei-enriched.dir} document-listing-file=${basedir}/${data.docs.list} xhtml-collection=${basedir}/${data.xhtml.content.dir} xhtml-header-collection=${basedir}/${data.xhtml.header.dir} url-prefix=${data.docs.mets.base.uri} replace-prefix=${basedir}./"
    />
    -->
  </target>
  
  <target name="data.structure" depends="data.dir.check, data.enrich" unless="data.dir.exist">
    <property name="data.structure.output" value="${target.dir}/structure-target.xhtml"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.xhtml.structure}" destfile="${data.structure.output}"
      params="collection=${basedir}/${data.tei-enriched.dir} output-collection=${basedir}/${data.xhtml.structure.dir} output-param=xhtml"
    />
  </target>

  <!-- Alias for METS Files -->
  <target name="data.generate.mets" depends="data.enrich"/>

  <!-- Page splitting -->
  <target name="data.split" depends="data.pages.check, data.enrich, data.dirs" unless="data.pages.exist">
    <property name="data.split.output" value="${target.dir}/split-report.xhtml"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.split}" destfile="${data.split.output}"
      params="input-collection=${basedir}/${data.tei-enriched.dir} output-collection=${basedir}/${data.tei-pages.dir} mode=tei"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.split}" destfile="${data.split.output}"
      params="input-collection=${basedir}/${data.tei-enriched.dir} output-collection=${basedir}/${data.xhtml-pages.dir} debug-output-collection=${basedir}/${data.xhtml.dir} mode=xhtml"/>
  </target>

  <!-- Aliases -->
  <target name="data.tei.split" depends="data.split"/>
  <target name="data.xhtml.split" depends="data.split"/>
  <target name="data.pages" depends="data.split"/>

  <target name="data.generate.descriptions" depends="data.dir.check, salvador.saxon.install, init" unless="data.dir.exist">
    <property name="data.descriptions.output" value="${target.dir}/descriptions-report.xhtml"/>
    <property name="data.descriptions.collection" value="./content/manuscripts/"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.description}" destfile="${data.descriptions.output}"
      params="input-collection=${basedir}/${data.tei.dir} output-collection=${data.descriptions.collection}"/>
  </target>

  <!-- A shortcut to disable the generation of enriched TEI files all the time -->
  <target name="data.enrich.check" depends="data.dirs">
    <fileset dir="${basedir}/${data.tei-enriched.dir}" id="data.enriched.fileset"/>
    <pathconvert refid="data.enriched.fileset" property="data.entiched.fileset.empty" setonempty="false"/>
  </target>

  <target name="data.generate.kml" depends="salvador.saxon.install, data.enrich">
    <salvador.saxon.xslt in="" xslt="" dest="exist.kml.placeName.local"/>
  </target>

  <target name="data.generate.cloud" depends="data.dir.check, salvador.saxon.install, data.enrich" unless="data.dir.exist">
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.cloud.persName.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:persName mode-param=cloud"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.cloud.placeName.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:placeName mode-param=cloud"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.cloud.term.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:term mode-param=cloud"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.cloud.bibl.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:bibl mode-param=cloud"/>
  </target>

  <target name="data.generate.index" depends="data.dir.check, salvador.saxon.install, data.enrich" unless="data.dir.exist">
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.indices.persName.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:persName mode-param=xhtml"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.indices.placeName.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:placeName mode-param=xhtml"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.indices.term.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:term mode-param=xhtml"/>
    <salvador.saxon.xslt.params in="${empty.xml}" style="${xslt.overview}" destfile="${data.indices.bibl.file}"
      params="collection-param=${basedir}/${data.tei-enriched.dir} entity-param=TEI:bibl mode-param=xhtml"/>
  </target>

  <!-- Target for all data -->
  <!-- Enable data.generate.kml, -->
  <target name="data.generate" depends="data.dir.check, data.enrich, data.statistics, data.generate.cloud, data.generate.index, data.split, data.structure" unless="data.dir.exist"/>


</project>
